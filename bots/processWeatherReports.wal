
	³Qö†ÿAH…ÌdtÖnÚûimport --name WeatherReport --type "File" --content  --extension ".repx"
defVar --name in_region --type String --parameter 
defVar --name ResponseCode --type String --value 0 --output 
defVar --name ResponseMessage --type String --output 
// Local Variables 
defVar --name orders --type DataTable
defVar --name row_count --type Numeric
defVar --name column_count --type Numeric
defVar --name row_iterator --type Numeric --value 1
defVar --name company --type String
defVar --name email --type String --value "ncrowther@uk.ibm.com"
defVar --name client_city --type String
defVar --name client_zipcode --type String
defVar --name success --type Boolean --value True
defVar --name pdfLocation --type String
defVar --name reportLocation --type String --value "D:\\RPA\\github\\gartnerUseCase6WeatherBot\\WeatherBot\\reports\\weatherReport.pdf"
defVar --name forecastDateTime --type String
defVar --name forecastDescription --type String
defVar --name ret --type Boolean
defVar --name weatherRequests --type FileSystem
defVar --name files --type List --innertype String
defVar --name googleDriveAccountName --type String --value "csmarques@gmail.com"
defVar --name googleDrive --type FileSystem
defVar --name fileList --type List --innertype String
defVar --name fileListLenght --type Numeric
defVar --name fileIndex --type Numeric --value 1
defVar --name fileName --type String
defVar --name fileNameWithoutPath --type String
defVar --name PDFFile --type Pdf
defVar --name fileNameWithouExtension --type String

goSub --label processWeatherRequests
beginSub --name processWeatherRequests

goSub --label ConnectToGDrive

goSub --label ProcessGDriveWeatherRequests

// Return response.  ResponseCode is 0 for success, any other number for error code
if --left "${success}" --operator "Is_True"
	setVar --name "${ResponseCode}" --value 0
	logMessage --message "Finished Successfully" --type "Info"
else
	setVar --name "${ResponseCode}" --value "-1"
	setVar --name "${ResponseMessage}" --value "Bot failed"
	logMessage --message "Finished with error:  code ${ResponseCode} ${ResponseMessage}" --type "Info"
endIf

endSub
beginSub --name processPDF
downloadStorage --fileSystem ${googleDrive} --source "${fileName}" --target "${fileName}"
pdfOpen --file "${fileName}" PDFFile=value
logMessage --message "Gathering data from file via OCR" --type "Info"
extractPdfText --page 1 --language "en-US" --searchregion "3,57,930,754" --anchor "Zip:" --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "36,-1,195,28" --targetprovider "Google" --file ${PDFFile} success=success client_zipcode=text
extractPdfText --page 1 --language "en-US" --searchregion "25,22,902,855" --anchor "Email:" --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "52,-3,408,29" --targetprovider "Google" --file ${PDFFile} success=success email=text

pdfClose --file ${PDFFile}
trimString --text "${email}" --trimoption "TrimEnd" email=value
trimString --text "${client_zipcode}" --trimoption "TrimEnd" client_zipcode=value
replaceText --texttoparse "${client_zipcode}" --textpattern " " client_zipcode=value
logMessage --message "Email: ${email}\r\nZip: ${client_zipcode}\r\n" --type "Info"
// Send weather report
goSub --label getWeather
goSub --label createReport
goSub --label emailWeather

endSub
beginSub --name moveFiles
getRegex --text "${fileName}" --regexPattern "([^/]*)$" --regexOptions "0" --comment "Get the file name without the PATH" fileNameWithoutPath=value
getRegex --text "${fileNameWithoutPath}" --regexPattern ".+?(?=\\.)" --regexOptions "0" --comment "Get the filename without the path and extension" fileNameWithouExtension=value
logMessage --message "Moving file to DONE folder" --type "Info"
fileMove --from "${fileName}" --to "/IBMRPA/DONE/" --fileSystem ${googleDrive}
logMessage --message "Writting the data gathered" --type "Info"
endSub
beginSub --name ProcessGDriveWeatherRequests
googleDriveConnect --name WeatherRequests googleDrive=value
getFiles --path "/IBMRPA/TODO" --fileSystem ${googleDrive} fileList=value
setVar --name "${fileListLenght}" --value "${fileList.Count}"
logMessage --message "\'Found ${fileListLenght} files!" --type "Info"

if --left "${fileListLenght}" --operator "Equal_To" --right 0
	logMessage --message "\'No files Found!" --type "Info"
	return
endIf
repeat
	get --collection "${fileList}" --index "${fileIndex}" fileName=value
	logMessage --message "Downloading file: ${fileName}" --type "Info"
	goSub --label processPDF
	goSub --label moveFiles
	evaluate --expression "${fileIndex}+1" fileIndex=value
until --left "${fileIndex}" --operator "Less_Than_Equal_To" --right "${fileListLenght}"
endSub

beginSub --name getWeather
executeScript --isfromfile  --filename "D:\\RPA\\github\\gartnerWeatherBot\\bots\\WeatherApi.wal" --parameters "in_region=${client_zipcode}" --output "out_forecastDateTime=${forecastDateTime},out_forecast=${forecastDescription},out_success=${success}" ret=value
endSub

beginSub --name createReport
exportReport --format "Pdf" --title "Refund Receipt" --watermark "None" --filepath "${reportLocation}" --asset "${asset.WeatherReport}" --mappings "location=London,outlook=${forecastDescription},forecastDate=${forecastDateTime}" reportLocation=filepath
endSub

beginSub --name emailWeather
setVar --name "${email}" --value "[ ${email} ]"
executeScript --isfromfile  --filename "D:\\RPA\\github\\gartnerUseCase6WeatherBot\\WeatherBot\\bots\\EmailBot.wal" --parameters "in_toList=${email},in_subject=Weather Report,in_attachment=${reportLocation}" success=value
logMessage --message "Sent ${reportLocation}" --type "Info"
endSub

beginSub --name ConnectToGDrive
googleDriveConnect --name WeatherRequests weatherRequests=value
getFiles --path "/" --recursive  --fileSystem ${weatherRequests} files=value
logMessage --message "${files}" --type "Info"
setVar --name "${pdfLocation}" --value "${files}[0]"
logMessage --message "${pdfLocation}" --type "Info"
endSub"	wƒ”7Û½bE¤Ú*ð¼ÿéd*21.0.2.2